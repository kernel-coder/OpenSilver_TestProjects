#region Usings

using System;
using System.Windows;
using System.Windows.Navigation;
using Microsoft.Practices.EnterpriseLibrary.Common.Configuration;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics;
using SLaB.Navigation.ContentLoaders.Utilities;
//using Navigatus.Common.Infrastructure;

#endregion

namespace Virtuoso.Core.Navigation
{
    public class NonLinearNavigationContentLoader : ContentLoaderBase
    {
        #region Declarations

#if OPENSILVER // Instantiate class generated by OpenSilver compiler instead of loading xaml page
        static readonly INavigationContentLoader _defaultLoader = new SLaB.Navigation.ContentLoaders.PageResource.PageResourceContentLoader();
#else
        static readonly INavigationContentLoader _defaultLoader = new PageResourceContentLoader();
#endif

        static readonly INonLinearNavigationActivePages _defaultActivePages = new NonLinearNavigationActivePages();
        INonLinearNavigationActivePages _activePages;

        #endregion Declarations

        #region Properties

        public INonLinearNavigationActivePages ActivePages
        {
            get { return _activePages ?? _defaultActivePages; }
            set { _activePages = value; }
        }

        public static INonLinearNavigationActivePages Current => _defaultActivePages;

        public static string CurrentPage;

        #endregion Properties

        #region Dependency Properties

        /// <summary>
        /// Gets or sets the INavigationContentLoader being wrapped by the NonLinearNavigationContentLoader
        /// </summary>
        /// <value>The INavigationContentLoader</value>
        public INavigationContentLoader ContentLoader
        {
            get { return (INavigationContentLoader)GetValue(ContentLoaderProperty); }
            set { SetValue(ContentLoaderProperty, value); }
        }

        public static readonly DependencyProperty ContentLoaderProperty =
            DependencyProperty.Register("ContentLoader", typeof(INavigationContentLoader),
                typeof(NonLinearNavigationContentLoader), new PropertyMetadata(null));


        public static NavigateKey GetNavigateKey(DependencyObject obj)
        {
            return (NavigateKey)obj.GetValue(NavigateKeyProperty);
        }

        public static void SetNavigateKey(DependencyObject obj, NavigateKey value)
        {
            obj.SetValue(NavigateKeyProperty, value);
        }

        public static readonly DependencyProperty NavigateKeyProperty =
            DependencyProperty.RegisterAttached("NavigateKey", typeof(NavigateKey),
                typeof(NonLinearNavigationContentLoader), new PropertyMetadata(null));

        #endregion Dependency Properties

        #region Methods

        /// <summary>
        /// Gets a value that indicates whether the specified URI can be loaded.
        /// </summary>
        /// <param name="targetUri">The URI to test.</param>
        /// <param name="currentUri">The URI that is currently loaded.</param>
        /// <returns>true if the URI can be loaded; otherwise, false.</returns>
        public override bool CanLoad(Uri targetUri, Uri currentUri)
        {
            return (ContentLoader ?? _defaultLoader).CanLoad(targetUri, currentUri);
        }

        /// <summary>
        /// Creates an instance of a LoaderBase that will be used to handle loading.
        /// </summary>
        /// <returns>An instance of a LoaderBase.</returns>
        protected override LoaderBase CreateLoader()
        {
            return new NonLinearNavigationLoader(this);
        }

        #endregion Methods

        #region Nested NonLinearNavigationLoader Class

        class NonLinearNavigationLoader : LoaderBase
        {
            LogWriter LogWriter { get; set; }
            NonLinearNavigationContentLoader _parent;
            IAsyncResult _result;

            INavigationContentLoader Loader => _parent.ContentLoader ?? _defaultLoader;

            INonLinearNavigationActivePages ActivePages => _parent.ActivePages;

            public NonLinearNavigationLoader(NonLinearNavigationContentLoader parent)
            {
                _parent = parent;
            }

            public override void Load(Uri targetUri, Uri currentUri)
            {
                LogWriter = EnterpriseLibraryContainer.Current.GetInstance<LogWriter>();

                //tamper protection 
                Boolean isMatchRequired = targetUri.OriginalString.Contains(Constants.ADDNEW) &&
                                          targetUri.OriginalString.Contains(Constants.TRACKING_KEY);

                try
                {
                    //tamper protection 
                    if (isMatchRequired && !ActivePages.Pages.ContainsKey(targetUri.OriginalString))
                    {
                        throw new InvalidOperationException("Uri missing from cache");
                    }

                    var containsKey = ContainsURI(targetUri);

                    if (containsKey)
                    {
                        //Return the 'cached page'
                        string __cachedURI = targetUri.OriginalString;

                        Object result = GetURI(targetUri, out __cachedURI);

                        Log(string.Format("Returning cached page targetUri.OriginalString: {0}", __cachedURI));

                        CurrentPage = result.ToString();
                        if (result is Uri)
                        {
                            Complete((Uri)result);
                        }
                        else
                        {
                            Complete(result);
                        }
                    }
                    else
                    {
                        _result = Loader.BeginLoad(targetUri, currentUri, res =>
                        {
                            try
                            {
                                LoadResult loadResult = Loader.EndLoad(res);
                                if (loadResult.RedirectUri != null)
                                {
                                    Complete(loadResult.RedirectUri);
                                }
                                else
                                {
                                    DependencyObject content = loadResult.LoadedContent as DependencyObject;
                                    CurrentPage = content.GetType().ToString();
                                    if (content != null)
                                    {
                                        String currentOriginalString = null;
                                        if (currentUri == null || String.IsNullOrWhiteSpace(currentUri.OriginalString))
                                        {
                                            currentOriginalString = Constants.HOME_URI_STRING;
                                        }
                                        else
                                        {
                                            currentOriginalString = currentUri.OriginalString;
                                        }

                                        String targetUriString = targetUri.OriginalString;
                                        String trackingKey = String.Empty;
                                        if (targetUri.OriginalString.EndsWith(Constants.ADD_NEW_QUERYSTRING))
                                        {
                                            trackingKey = Guid.NewGuid().ToString();
                                            targetUriString =
                                                String.Concat(
                                                    targetUriString.Replace(Constants.ADD_NEW_QUERYSTRING,
                                                        String.Empty), Constants.TRACKING_KEY_QUERYSTRING, trackingKey);
                                        }

                                        content.SetValue(NavigateKeyProperty,
                                            new NavigateKey(content.GetType(), targetUriString, currentOriginalString,
                                                ActivePages, trackingKey));

                                        Log(string.Format("Adding to ActivePages: targetUriString: {0}",
                                            targetUriString));

                                        SetURI(content, targetUriString);

                                        //Return a newly 'cached page'
                                        Complete(content);
                                    }
                                    else
                                    {
                                        throw new InvalidOperationException(
                                            "LoadedContent was null or not a DependencyObject");
                                    }
                                }
                            }
                            catch (Exception e)
                            {
                                Error(e);
                            }
                        }, null);
                    }
                }
                catch (Exception e)
                {
                    Error(e);
                }
            }

            private void SetURI(DependencyObject content, String targetUriString)
            {
                ActivePages.Pages.Add(targetUriString, content);
            }

            private object GetURI(Uri targetUri, out string cachedURIString)
            {
                cachedURIString = targetUri.OriginalString;
                Object result = null;

                result = ActivePages.GetPage(targetUri.OriginalString);

                return result;
            }

            private bool ContainsURI(Uri targetUri)
            {
                var containsKey = ActivePages.Pages.ContainsKey(targetUri.OriginalString);
                
                return containsKey;
            }

            public override void Cancel()
            {
                Loader.CancelLoad(_result);
            }

            private void Log(String msg)
            {
                LogWriter.Write(
                    msg,
                    new[] { GetType().ToString() }, //category
                    0, //priority
                    0, //eventid
                    TraceEventType.Information);
#if DEBUG
                System.Diagnostics.Debug.WriteLine(
                    "----------------------------------------------------------------------------------------------------------------------------");
                System.Diagnostics.Debug.WriteLine(msg);
                System.Diagnostics.Debug.WriteLine(
                    "----------------------------------------------------------------------------------------------------------------------------");
#endif
            }
        }

        #endregion Nested NonLinearNavigationLoader Class
    }
}