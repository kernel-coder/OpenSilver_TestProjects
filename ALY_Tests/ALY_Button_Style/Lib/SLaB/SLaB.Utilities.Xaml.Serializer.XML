<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SLaB.Utilities.Xaml.Serializer</name>
    </assembly>
    <members>
        <member name="T:SLaB.Utilities.Xaml.Serializer.XamlSerializer">
            <summary>
              A utility class for serializing objects into Xaml.  Does not recognize UI concepts such as DependencyProperties.
            </summary>
        </member>
        <member name="F:SLaB.Utilities.Xaml.Serializer.XamlSerializer.XamlNamespace">
            <summary>
              The namespace for Xaml language features (commonly prefixed as "x:")
            </summary>
        </member>
        <member name="F:SLaB.Utilities.Xaml.Serializer.XamlSerializer.AttachedProperties">
            <summary>
              A mapping of target types to discovered attached properties.  Derived classes can pre-populate this collection.
            </summary>
        </member>
        <member name="F:SLaB.Utilities.Xaml.Serializer.XamlSerializer.BuiltIn">
            <summary>
              A TypeConverter that knows how to convert built-in (i.e. mscorlib) types to strings.
            </summary>
        </member>
        <member name="F:SLaB.Utilities.Xaml.Serializer.XamlSerializer.DiscoveredTypes">
            <summary>
              A set of the types that have already had their attached properties discovered.
            </summary>
        </member>
        <member name="F:SLaB.Utilities.Xaml.Serializer.XamlSerializer.PropEquals">
            <summary>
              An IEqualityComparer that compares two PropertyInfo objects for equality.
            </summary>
        </member>
        <member name="F:SLaB.Utilities.Xaml.Serializer.XamlSerializer.PropertiesToSkip">
            <summary>
              A set of properties to skip when serializing in order to avoid properties that will inevitably throw.
            </summary>
        </member>
        <member name="F:SLaB.Utilities.Xaml.Serializer.XamlSerializer.RefEquals">
            <summary>
              An IEqualityComparer that checks to see if two items refer to the same object (reference equality).
            </summary>
        </member>
        <member name="F:SLaB.Utilities.Xaml.Serializer.XamlSerializer.TypeConverters">
            <summary>
              Supplemental TypeConverters (in case a supplied TypeConverter is missing or lacks a ConvertTo implementation).
            </summary>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.#ctor">
            <summary>
              Constructs a XamlSerializer.
            </summary>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.DiscoverAttachedProperties(System.Reflection.Assembly)">
            <summary>
              Searches an assembly for attached properties that can be serialized in Xaml.
            </summary>
            <param name = "asm">The assembly to search.</param>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.DiscoverAttachedProperties(System.Type)">
            <summary>
              Searches a type for attached properties that can be serialized in Xaml.
            </summary>
            <param name = "type">The type to search.</param>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.RegisterAttachedProperty(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
              Registers an attached property for serialization explicitly based upon its getter and setter.
            </summary>
            <param name = "getter">The getter for the attached property.</param>
            <param name = "setter">The setter for the attached property.</param>
            <returns>true if the attached property was valid and registered, otherwise false.</returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.Serialize(System.Object)">
            <summary>
              Serializes an object to Xaml.
            </summary>
            <param name = "obj">The object to serialize.</param>
            <returns>A Xaml string representing the object.</returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.CanWriteObject(System.Object,System.Collections.Generic.ISet{System.Object})">
            <summary>
              Checks to see whether an object can be serialized in Xaml.
            </summary>
            <param name = "obj">The object to be serialized.</param>
            <param name = "cycleCheckObjects">The set of objects currently on the stack (used to avoid cycles).</param>
            <returns>true if the object can be serialized, false otherwise.</returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.CanWriteProperty(System.Reflection.PropertyInfo)">
            <summary>
              Checks to see whether a property is writeable (and thus can be serialized).
            </summary>
            <param name = "p">The property to check.</param>
            <returns>true if the property can be written, false otherwise.</returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.GetAttachedOrder(SLaB.Utilities.Xaml.Serializer.XamlSerializer.AttachedProperty)">
            <summary>
              Gets a string for an attached property used to determine the order in which attached properties will be serialized.
            </summary>
            <param name = "ap">The attached property being serialized.</param>
            <returns>A sortable string representation for the attached property.</returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.GetAttachedProperties(System.Type)">
            <summary>
              Gets all of the attached properties that could be applied to the specified type (or its base types or interfaces).
            </summary>
            <param name = "t">The type for which attached properties should be retrieved.</param>
            <returns>A collection of attached properties for the given type.</returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.GetContentProperty(System.Object)">
            <summary>
              Gets the ContentProperty for the given object.
            </summary>
            <param name = "obj">The object being serialized.</param>
            <returns>The ContentProperty for the given object, or null if one is not specified.</returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.GetNamespace(System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
              Gets the xml namespace for the given type.
            </summary>
            <param name = "t">The type whose namespace must be retrieved.</param>
            <param name = "prefixMappings">A mapping of xml namespaces to prefixes.</param>
            <returns>The xml namespace for the type.</returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.GetPrefix(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Xml.XmlWriter)">
            <summary>
              Gets an Xml prefix for the given namespace, taking into consideration any existing prefixes in the XmlWriter.
            </summary>
            <param name = "ns">The namespace for which a namespace must be assigned.</param>
            <param name = "prefixMappings">Existing prefix mappings.</param>
            <param name = "writer">The writer which will consume the prefix.</param>
            <returns>A prefix for the given namespace.</returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.GetPropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
            Gets the property getter.
            </summary>
            <param name="inf">The PropertyInfo from which to get the getter.</param>
            <returns></returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.GetPropertyOrder(System.Reflection.PropertyInfo)">
            <summary>
              Gets a string for a property used to determine the order in which properties will be serialized.
            </summary>
            <param name = "prop">The property being serialized.</param>
            <returns>A sortable string representation for the property.</returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.GetTypeConverter(System.Reflection.MemberInfo)">
            <summary>
              Gets the TypeConverter for the given property or attached property.
            </summary>
            <param name = "inf">The property or getter for the attached property.</param>
            <returns>The TypeConverter to be used for serialization if one exists, otherwise null.</returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.GetXmlWriter(System.Text.StringBuilder)">
            <summary>
              Gets an XmlWriter for the given StringBuilder, and can be used to customize formatting settings for the Xaml.
            </summary>
            <param name = "output">The StringBuilder into which the writer will emit Xaml.</param>
            <returns>An XmlWriter to be used for serialization.</returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.IsDictionary(System.Type)">
            <summary>
              Determines whether a type matches the dictionary interface that Xaml supports.
            </summary>
            <param name = "t">The type to check.</param>
            <returns>true if the type is a supported dictionary type, false otherwise.</returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.IsInlinable(System.Object,System.Object,System.Reflection.MemberInfo,System.Collections.Generic.ISet{System.Object})">
            <summary>
              Determines whether the given property can be written inline (as an attribute) rather than using object-element syntax.
            </summary>
            <param name = "obj">The object on which the property is being set.</param>
            <param name = "propValue">The value of the property being set.</param>
            <param name = "inf">The identifier for the property being set (a PropertyInfo for a property, and the getter MethodInfo for an attached property).</param>
            <param name = "cycleCheckObjects">The set of objects on the stack (for cycle detection).</param>
            <returns></returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.IsInlineAttachedProperty(System.Object,System.Object,System.Reflection.MethodInfo,System.Collections.Generic.ISet{System.Object})">
            <summary>
              Determines whether an attached property can be serialized in attribute form rather than using object-element syntax.
            </summary>
            <param name = "obj">The object on which the attached property is set.</param>
            <param name = "propValue">The value of the attached property.</param>
            <param name = "meth">The getter for the attached property.</param>
            <param name = "cycleCheckObjects">The set of objects on the stack (for cycle detection).</param>
            <returns>true if the attached property can be written as an attribute, false otherwise.</returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.IsInlineProperty(System.Object,System.Object,System.Reflection.PropertyInfo,System.Collections.Generic.ISet{System.Object})">
            <summary>
              Determines whether a property can be serialized in attribute form rather than using object-element syntax.
            </summary>
            <param name = "obj">The object on which the property is set.</param>
            <param name = "propValue">The value of the property.</param>
            <param name = "prop">The property to serialize.</param>
            <param name = "cycleCheckObjects">The set of objects on the stack (for cycle detection).</param>
            <returns>true if the property can be written as an attribute, false otherwise.</returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.IsList(System.Type)">
            <summary>
              Determines whether a type matches the collection interface that Xaml supports.
            </summary>
            <param name = "t">The type to check.</param>
            <returns>true if the type is a supported collection type, false otherwise.</returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.IsUnique(System.Object,System.Collections.Generic.ISet{System.Object})">
            <summary>
              Determines whether an object is unique given the items on the stack.
            </summary>
            <param name = "obj">The object to check.</param>
            <param name = "cycleCheckObjects">The set of objects on the stack (for cycle detection).</param>
            <returns>true if the object is unique, false otherwise.</returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.PostSerialize(System.Object,System.String@)">
            <summary>
              Called after serialization (and can be used for cleanup).
            </summary>
            <param name = "obj">The object being serialized.</param>
            <param name = "str">The serialized Xaml, which can be modified for cleanup during this method.</param>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.PreSerialize(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.ISet{System.Object})">
            <summary>
              Called before serialization (and can be used for initialization).
            </summary>
            <param name = "obj">The object being serialized.</param>
            <param name = "prefixMappings">The initial dictionary of prefixes, which can be primed for custom serializers.</param>
            <param name = "cycleCheckObjects">The set of objects on the stack, which can be primed if certain objects must be avoided.</param>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.ShouldSerialize(System.Object,System.Object,System.Reflection.PropertyInfo)">
            <summary>
              Determines whether a property should be serialized (based upon the DefaultAttribute and ShouldSerialize methods).
            </summary>
            <param name = "obj">The object being serialized.</param>
            <param name = "propValue">The value of the property being serialized.</param>
            <param name = "prop">The property being serialized.</param>
            <returns>true if the property should be serialized, false otherwise.</returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.VisitAfterAttributes(System.Object,System.Xml.XmlWriter,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ISet{System.Object})">
            <summary>
              Called after all properties that can be written as attributes (rather than in object-element syntax) are written, but before an object-element content is written.  Use this virtual as an opportunity to inject additional attributes before the object is written.
            </summary>
            <param name = "obj">The object being serialized.</param>
            <param name = "writer">The writer being used for serialization.</param>
            <param name = "prefixMappings">A mapping of xml namespaces to prefixes.</param>
            <param name = "cycleCheckObjects">The set of objects on the stack (for cycle detection).</param>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.VisitAfterBeginElement(System.Object,System.Xml.XmlWriter,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ISet{System.Object})">
            <summary>
              Called immediately after the BeginElement for the object being serialized has been written.
            </summary>
            <param name = "obj">The object being serialized.</param>
            <param name = "writer">The writer being used for serialization.</param>
            <param name = "prefixMappings">A mapping of xml namespaces to prefixes.</param>
            <param name = "cycleCheckObjects">The set of objects on the stack (for cycle detection).</param>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.VisitAlternateContent(System.Object,System.Xml.XmlWriter,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ISet{System.Object})">
            <summary>
              Called when an object's Content property was not set, allowing special types (e.g. Templates) whose content properties are not discoverable publicly, to be serialized.
            </summary>
            <param name = "obj">The object being serialized.</param>
            <param name = "writer">The writer being used for serialization.</param>
            <param name = "prefixMappings">A mapping of xml namespaces to prefixes.</param>
            <param name = "cycleCheckObjects">The set of objects on the stack (for cycle detection).</param>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.VisitAttachedProperty(System.Object,System.Object,System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xml.XmlWriter,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ISet{System.Object})">
            <summary>
              Serializes an attached property on an object.
            </summary>
            <param name = "obj">The object on which the attached property is set.</param>
            <param name = "propValue">The value of the attached property.</param>
            <param name = "propertyName">The name of the attached property.</param>
            <param name = "getter">The getter method for the attached property.</param>
            <param name = "setter">The setter method for the attached property.</param>
            <param name = "writer">The writer being used to serialize the object.</param>
            <param name = "prefixMappings">A mapping of xml namespaces to prefixes.</param>
            <param name = "cycleCheckObjects">The set of objects currently on the stack (for cycle detection).</param>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.VisitBeforeEndElement(System.Object,System.Xml.XmlWriter,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ISet{System.Object})">
            <summary>
              Called immediately before the EndElement for the object being serialized is called.  Can be used for cleanup.
            </summary>
            <param name = "obj">The object being serialized.</param>
            <param name = "writer">The writer being used for serialization.</param>
            <param name = "prefixMappings">A mapping of xml namespaces to prefixes.</param>
            <param name = "cycleCheckObjects">The set of objects on the stack (for cycle detection).</param>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.VisitCollectionContents(System.Collections.IEnumerable,System.Xml.XmlWriter,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ISet{System.Object})">
            <summary>
              Serializes the contents of a collection.
            </summary>
            <param name = "collection">The collection being serialized.</param>
            <param name = "writer">The writer being used for serialization.</param>
            <param name = "prefixMappings">A mapping of xml namespaces to prefixes.</param>
            <param name = "cycleCheckObjects">The set of objects on the stack (for cycle detection).</param>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.VisitDictionaryContents(System.Collections.IDictionary,System.Xml.XmlWriter,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ISet{System.Object})">
            <summary>
              Serializes the contents of a dictionary.
            </summary>
            <param name = "dict">The dictionary being serialized.</param>
            <param name = "writer">The writer being used for serialization.</param>
            <param name = "prefixMappings">A mapping of xml namespaces to prefixes.</param>
            <param name = "cycleCheckObjects">The set of objects on the stack (for cycle detection).</param>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.VisitKey(System.Object,System.Xml.XmlWriter,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ISet{System.Object})">
            <summary>
              Serializes a key for an object (usually as "x:Key").  The writer will be in attribute mode.
            </summary>
            <param name = "key">The key to serialize.</param>
            <param name = "writer">The writer being used for serialization.</param>
            <param name = "prefixMappings">A mapping of xml namespaces to prefixes.</param>
            <param name = "cycleCheckObjects">The set of objects on the stack (for cycle detection).</param>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.VisitObject(System.Object,System.Xml.XmlWriter,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ISet{System.Object},System.Boolean,System.Object)">
            <summary>
              Serializes an object into Xaml.
            </summary>
            <param name = "obj">The object to serialize.</param>
            <param name = "writer">The writer being used for serialization.</param>
            <param name = "prefixMappings">A mapping of xml namespaces to prefixes.</param>
            <param name = "cycleCheckObjects">The set of objects on the stack (for cycle detection)</param>
            <param name = "isRoot">A value indicating whether this object is the root of the document.</param>
            <param name = "key">A value that represents the key for this object, or null if the object has no key (and hence is not in a dictionary).</param>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.VisitProperty(System.Object,System.Object,System.Reflection.PropertyInfo,System.Boolean,System.Xml.XmlWriter,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ISet{System.Object})">
            <summary>
              Serializes a property.
            </summary>
            <param name = "obj">The object on which the property is set.</param>
            <param name = "propValue">The value of the property.</param>
            <param name = "prop">The property being set.</param>
            <param name = "isContentProperty">A value indicating that the property is the ContentProperty for the object, and thus no property elements need to be generated.</param>
            <param name = "writer">The writer being used for serialization.</param>
            <param name = "prefixMappings">A mapping of xml namespaces to prefixes.</param>
            <param name = "cycleCheckObjects">The set of objects on the stack (for cycle detection).</param>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.VisitRootAttribute(System.Object,System.Xml.XmlWriter,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ISet{System.Object})">
            <summary>
              Called during attribute serialization on the root object.  Can be used for global namespace declaration.
            </summary>
            <param name = "obj">The root object.</param>
            <param name = "writer">The writer being used for serialization.</param>
            <param name = "prefixMappings">A mapping of xml namespaces to prefixes.</param>
            <param name = "cycleCheckObjects">The set of objects on the stack (for cycle detection).</param>
        </member>
        <member name="T:SLaB.Utilities.Xaml.Serializer.XamlSerializer.AttachedProperty">
            <summary>
              Represents an attached property.
            </summary>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.AttachedProperty.ToString">
            <summary>
              Returns a <see cref = "T:System.String" /> that represents the current <see cref = "T:System.Object" />.
            </summary>
            <returns>
              A <see cref = "T:System.String" /> that represents the current <see cref = "T:System.Object" />.
            </returns>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.AttachedProperty.Validate">
            <summary>
              Validates the attached property, checking to see that the getter and setter meet all of the requirements for a serializable attached property.
            </summary>
            <returns>true if the attached property is valid, otherwise false.</returns>
        </member>
        <member name="P:SLaB.Utilities.Xaml.Serializer.XamlSerializer.AttachedProperty.Getter">
            <summary>
              The getter method for the attached property.
            </summary>
        </member>
        <member name="P:SLaB.Utilities.Xaml.Serializer.XamlSerializer.AttachedProperty.GetterFunc">
            <summary>
              A reflection-emitted delegate for getting the value of the attached property (for performance enhancements).
            </summary>
        </member>
        <member name="P:SLaB.Utilities.Xaml.Serializer.XamlSerializer.AttachedProperty.Name">
            <summary>
              The name of the attached property.
            </summary>
        </member>
        <member name="P:SLaB.Utilities.Xaml.Serializer.XamlSerializer.AttachedProperty.Setter">
            <summary>
              The setter method for the attached property (if any).
            </summary>
        </member>
        <member name="P:SLaB.Utilities.Xaml.Serializer.XamlSerializer.AttachedProperty.TargetType">
            <summary>
              The type that the attached property targets.
            </summary>
        </member>
        <member name="P:SLaB.Utilities.Xaml.Serializer.XamlSerializer.AttachedProperty.ValueType">
            <summary>
              The return value of the attached property.
            </summary>
        </member>
        <member name="T:SLaB.Utilities.Xaml.Serializer.XamlSerializer.DelegateEqualityComparer`1">
            <summary>
              Implements an IEqualityComparer based upon delegates.
            </summary>
            <typeparam name = "T"></typeparam>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.DelegateEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
              Constructs a DelegateEqualityComparer.
            </summary>
            <param name = "equals">The delegate to use to check equality.</param>
            <param name = "hash">The delegate to use to retrieve the hashcode for the object.</param>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.DelegateEqualityComparer`1.Equals(`0,`0)">
            <summary>
              When overridden in a derived class, determines whether two objects of type T are equal.
            </summary>
            <returns>
              true if the specified objects are equal; otherwise, false.
            </returns>
            <param name = "x">The first object to compare.</param>
            <param name = "y">The second object to compare.</param>
        </member>
        <member name="M:SLaB.Utilities.Xaml.Serializer.XamlSerializer.DelegateEqualityComparer`1.GetHashCode(`0)">
            <summary>
              When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.
            </summary>
            <returns>
              A hash code for the specified object.
            </returns>
            <param name = "obj">The object for which to get a hash code.</param>
            <exception cref = "T:System.ArgumentNullException">The type of <paramref name = "obj" /> is a reference type and <paramref name = "obj" /> is null.</exception>
        </member>
    </members>
</doc>
